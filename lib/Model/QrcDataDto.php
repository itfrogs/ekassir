<?php
/**
 * QrcDataDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ekassir.IPSMerchant.APIService.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * QrcDataDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QrcDataDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QrcDataDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account' => 'string',
'merchant_id' => 'string',
'template_version' => '\Swagger\Client\Model\QrcDataDtoTemplateVersion',
'qrc_type' => '\Swagger\Client\Model\QrcDataDtoQrcType',
'amount' => 'int',
'currency' => '\Swagger\Client\Model\QrcDataDtoCurrency',
'qrc_ttl' => 'int',
'payment_purpose' => 'string',
'subscription_purpose' => 'string',
'redirect_url' => 'string',
'params' => '\Swagger\Client\Model\Parameters'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account' => null,
'merchant_id' => null,
'template_version' => null,
'qrc_type' => null,
'amount' => 'int64',
'currency' => null,
'qrc_ttl' => 'int32',
'payment_purpose' => null,
'subscription_purpose' => null,
'redirect_url' => null,
'params' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
'merchant_id' => 'merchantId',
'template_version' => 'templateVersion',
'qrc_type' => 'qrcType',
'amount' => 'amount',
'currency' => 'currency',
'qrc_ttl' => 'qrcTtl',
'payment_purpose' => 'paymentPurpose',
'subscription_purpose' => 'subscriptionPurpose',
'redirect_url' => 'redirectUrl',
'params' => 'params'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
'merchant_id' => 'setMerchantId',
'template_version' => 'setTemplateVersion',
'qrc_type' => 'setQrcType',
'amount' => 'setAmount',
'currency' => 'setCurrency',
'qrc_ttl' => 'setQrcTtl',
'payment_purpose' => 'setPaymentPurpose',
'subscription_purpose' => 'setSubscriptionPurpose',
'redirect_url' => 'setRedirectUrl',
'params' => 'setParams'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
'merchant_id' => 'getMerchantId',
'template_version' => 'getTemplateVersion',
'qrc_type' => 'getQrcType',
'amount' => 'getAmount',
'currency' => 'getCurrency',
'qrc_ttl' => 'getQrcTtl',
'payment_purpose' => 'getPaymentPurpose',
'subscription_purpose' => 'getSubscriptionPurpose',
'redirect_url' => 'getRedirectUrl',
'params' => 'getParams'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['template_version'] = isset($data['template_version']) ? $data['template_version'] : null;
        $this->container['qrc_type'] = isset($data['qrc_type']) ? $data['qrc_type'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['qrc_ttl'] = isset($data['qrc_ttl']) ? $data['qrc_ttl'] : null;
        $this->container['payment_purpose'] = isset($data['payment_purpose']) ? $data['payment_purpose'] : null;
        $this->container['subscription_purpose'] = isset($data['subscription_purpose']) ? $data['subscription_purpose'] : null;
        $this->container['redirect_url'] = isset($data['redirect_url']) ? $data['redirect_url'] : null;
        $this->container['params'] = isset($data['params']) ? $data['params'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['template_version'] === null) {
            $invalidProperties[] = "'template_version' can't be null";
        }
        if ($this->container['qrc_type'] === null) {
            $invalidProperties[] = "'qrc_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account
     *
     * @return string
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id merchant_id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets template_version
     *
     * @return \Swagger\Client\Model\QrcDataDtoTemplateVersion
     */
    public function getTemplateVersion()
    {
        return $this->container['template_version'];
    }

    /**
     * Sets template_version
     *
     * @param \Swagger\Client\Model\QrcDataDtoTemplateVersion $template_version template_version
     *
     * @return $this
     */
    public function setTemplateVersion($template_version)
    {
        $this->container['template_version'] = $template_version;

        return $this;
    }

    /**
     * Gets qrc_type
     *
     * @return \Swagger\Client\Model\QrcDataDtoQrcType
     */
    public function getQrcType()
    {
        return $this->container['qrc_type'];
    }

    /**
     * Sets qrc_type
     *
     * @param \Swagger\Client\Model\QrcDataDtoQrcType $qrc_type qrc_type
     *
     * @return $this
     */
    public function setQrcType($qrc_type)
    {
        $this->container['qrc_type'] = $qrc_type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Swagger\Client\Model\QrcDataDtoCurrency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Swagger\Client\Model\QrcDataDtoCurrency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets qrc_ttl
     *
     * @return int
     */
    public function getQrcTtl()
    {
        return $this->container['qrc_ttl'];
    }

    /**
     * Sets qrc_ttl
     *
     * @param int $qrc_ttl qrc_ttl
     *
     * @return $this
     */
    public function setQrcTtl($qrc_ttl)
    {
        $this->container['qrc_ttl'] = $qrc_ttl;

        return $this;
    }

    /**
     * Gets payment_purpose
     *
     * @return string
     */
    public function getPaymentPurpose()
    {
        return $this->container['payment_purpose'];
    }

    /**
     * Sets payment_purpose
     *
     * @param string $payment_purpose payment_purpose
     *
     * @return $this
     */
    public function setPaymentPurpose($payment_purpose)
    {
        $this->container['payment_purpose'] = $payment_purpose;

        return $this;
    }

    /**
     * Gets subscription_purpose
     *
     * @return string
     */
    public function getSubscriptionPurpose()
    {
        return $this->container['subscription_purpose'];
    }

    /**
     * Sets subscription_purpose
     *
     * @param string $subscription_purpose subscription_purpose
     *
     * @return $this
     */
    public function setSubscriptionPurpose($subscription_purpose)
    {
        $this->container['subscription_purpose'] = $subscription_purpose;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string $redirect_url redirect_url
     *
     * @return $this
     */
    public function setRedirectUrl($redirect_url)
    {
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets params
     *
     * @return \Swagger\Client\Model\Parameters
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param \Swagger\Client\Model\Parameters $params params
     *
     * @return $this
     */
    public function setParams($params)
    {
        $this->container['params'] = $params;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
