<?php
/**
 * Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ekassir.IPSMerchant.APIService.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Data Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'qrc_id' => 'string',
'code' => 'string',
'message' => 'string',
'status' => '\Swagger\Client\Model\DataStatus',
'operation_id' => 'int',
'trx_id' => 'string',
'amount' => 'int',
'operation_timestamp' => '\DateTime',
'params' => '\Swagger\Client\Model\Parameters',
'payment_params' => '\Swagger\Client\Model\PaymentParameter[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'qrc_id' => null,
'code' => null,
'message' => null,
'status' => null,
'operation_id' => 'int64',
'trx_id' => null,
'amount' => 'int64',
'operation_timestamp' => 'date-time',
'params' => null,
'payment_params' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'qrc_id' => 'qrcId',
'code' => 'code',
'message' => 'message',
'status' => 'status',
'operation_id' => 'operationId',
'trx_id' => 'trxId',
'amount' => 'amount',
'operation_timestamp' => 'operationTimestamp',
'params' => 'params',
'payment_params' => 'paymentParams'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'qrc_id' => 'setQrcId',
'code' => 'setCode',
'message' => 'setMessage',
'status' => 'setStatus',
'operation_id' => 'setOperationId',
'trx_id' => 'setTrxId',
'amount' => 'setAmount',
'operation_timestamp' => 'setOperationTimestamp',
'params' => 'setParams',
'payment_params' => 'setPaymentParams'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'qrc_id' => 'getQrcId',
'code' => 'getCode',
'message' => 'getMessage',
'status' => 'getStatus',
'operation_id' => 'getOperationId',
'trx_id' => 'getTrxId',
'amount' => 'getAmount',
'operation_timestamp' => 'getOperationTimestamp',
'params' => 'getParams',
'payment_params' => 'getPaymentParams'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['qrc_id'] = isset($data['qrc_id']) ? $data['qrc_id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['operation_id'] = isset($data['operation_id']) ? $data['operation_id'] : null;
        $this->container['trx_id'] = isset($data['trx_id']) ? $data['trx_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['operation_timestamp'] = isset($data['operation_timestamp']) ? $data['operation_timestamp'] : null;
        $this->container['params'] = isset($data['params']) ? $data['params'] : null;
        $this->container['payment_params'] = isset($data['payment_params']) ? $data['payment_params'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['qrc_id'] === null) {
            $invalidProperties[] = "'qrc_id' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['message'] === null) {
            $invalidProperties[] = "'message' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets qrc_id
     *
     * @return string
     */
    public function getQrcId()
    {
        return $this->container['qrc_id'];
    }

    /**
     * Sets qrc_id
     *
     * @param string $qrc_id qrc_id
     *
     * @return $this
     */
    public function setQrcId($qrc_id)
    {
        $this->container['qrc_id'] = $qrc_id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\DataStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\DataStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets operation_id
     *
     * @return int
     */
    public function getOperationId()
    {
        return $this->container['operation_id'];
    }

    /**
     * Sets operation_id
     *
     * @param int $operation_id operation_id
     *
     * @return $this
     */
    public function setOperationId($operation_id)
    {
        $this->container['operation_id'] = $operation_id;

        return $this;
    }

    /**
     * Gets trx_id
     *
     * @return string
     */
    public function getTrxId()
    {
        return $this->container['trx_id'];
    }

    /**
     * Sets trx_id
     *
     * @param string $trx_id trx_id
     *
     * @return $this
     */
    public function setTrxId($trx_id)
    {
        $this->container['trx_id'] = $trx_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets operation_timestamp
     *
     * @return \DateTime
     */
    public function getOperationTimestamp()
    {
        return $this->container['operation_timestamp'];
    }

    /**
     * Sets operation_timestamp
     *
     * @param \DateTime $operation_timestamp operation_timestamp
     *
     * @return $this
     */
    public function setOperationTimestamp($operation_timestamp)
    {
        $this->container['operation_timestamp'] = $operation_timestamp;

        return $this;
    }

    /**
     * Gets params
     *
     * @return \Swagger\Client\Model\Parameters
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param \Swagger\Client\Model\Parameters $params params
     *
     * @return $this
     */
    public function setParams($params)
    {
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets payment_params
     *
     * @return \Swagger\Client\Model\PaymentParameter[]
     */
    public function getPaymentParams()
    {
        return $this->container['payment_params'];
    }

    /**
     * Sets payment_params
     *
     * @param \Swagger\Client\Model\PaymentParameter[] $payment_params payment_params
     *
     * @return $this
     */
    public function setPaymentParams($payment_params)
    {
        $this->container['payment_params'] = $payment_params;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
